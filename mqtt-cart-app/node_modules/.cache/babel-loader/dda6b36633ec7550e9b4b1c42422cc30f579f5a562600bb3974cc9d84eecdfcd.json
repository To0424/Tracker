{"ast":null,"code":"var _jsxFileName = \"/Users/daviswu/Desktop/cart-tracker/React-MQTT/mqtt-cart-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport CartMovement from './components/CartMovement';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MQTT_BROKER = 'ws://broker.hivemq.com:8000/mqtt';\nconst MQTT_TOPIC = 'cart/position';\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const client = mqtt.connect(MQTT_BROKER);\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC, err => {\n        if (err) {\n          console.error('Subscription error:', err);\n        }\n      });\n    });\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        const newData = JSON.parse(message.toString());\n        setData(prevData => {\n          // Check if the newData already exists in the list\n          const exists = prevData.some(dataPoint => dataPoint.x_axis === newData.x_axis && dataPoint.y_axis === newData.y_axis);\n          if (exists) {\n            return prevData; // If it exists, return the previous data without changes\n          }\n          const updatedData = [...prevData, newData];\n          localStorage.setItem('cartData', JSON.stringify(updatedData));\n          return updatedData;\n        });\n      }\n    });\n    return () => {\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data Points\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CartMovement, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","mqtt","CartMovement","jsxDEV","_jsxDEV","MQTT_BROKER","MQTT_TOPIC","App","_s","data","setData","client","connect","on","console","log","subscribe","err","error","topic","message","newData","JSON","parse","toString","prevData","exists","some","dataPoint","x_axis","y_axis","updatedData","localStorage","setItem","stringify","end","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/daviswu/Desktop/cart-tracker/React-MQTT/mqtt-cart-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport CartMovement from './components/CartMovement';\n\nconst MQTT_BROKER = 'ws://broker.hivemq.com:8000/mqtt';\nconst MQTT_TOPIC = 'cart/position';\n\nconst App = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const client = mqtt.connect(MQTT_BROKER);\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC, (err) => {\n        if (err) {\n          console.error('Subscription error:', err);\n        }\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        const newData = JSON.parse(message.toString());\n\n        setData((prevData) => {\n          // Check if the newData already exists in the list\n          const exists = prevData.some(\n            (dataPoint) => dataPoint.x_axis === newData.x_axis && dataPoint.y_axis === newData.y_axis\n          );\n\n          if (exists) {\n            return prevData; // If it exists, return the previous data without changes\n          }\n\n          const updatedData = [...prevData, newData];\n          localStorage.setItem('cartData', JSON.stringify(updatedData));\n          return updatedData;\n        });\n      }\n    });\n\n    return () => {\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>Data Points</h1>\n      <CartMovement data={data} />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,YAAY,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,WAAW,GAAG,kCAAkC;AACtD,MAAMC,UAAU,GAAG,eAAe;AAElC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd,MAAMW,MAAM,GAAGV,IAAI,CAACW,OAAO,CAACP,WAAW,CAAC;IAExCM,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCJ,MAAM,CAACK,SAAS,CAACV,UAAU,EAAGW,GAAG,IAAK;QACpC,IAAIA,GAAG,EAAE;UACPH,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAAC;QAC3C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFN,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,CAACM,KAAK,EAAEC,OAAO,KAAK;MACvC,IAAID,KAAK,KAAKb,UAAU,EAAE;QACxB,MAAMe,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;QAE9Cd,OAAO,CAAEe,QAAQ,IAAK;UACpB;UACA,MAAMC,MAAM,GAAGD,QAAQ,CAACE,IAAI,CACzBC,SAAS,IAAKA,SAAS,CAACC,MAAM,KAAKR,OAAO,CAACQ,MAAM,IAAID,SAAS,CAACE,MAAM,KAAKT,OAAO,CAACS,MACrF,CAAC;UAED,IAAIJ,MAAM,EAAE;YACV,OAAOD,QAAQ,CAAC,CAAC;UACnB;UAEA,MAAMM,WAAW,GAAG,CAAC,GAAGN,QAAQ,EAAEJ,OAAO,CAAC;UAC1CW,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEX,IAAI,CAACY,SAAS,CAACH,WAAW,CAAC,CAAC;UAC7D,OAAOA,WAAW;QACpB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACX,IAAIpB,MAAM,EAAE;QACVA,MAAM,CAACwB,GAAG,CAAC,CAAC;MACd;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE/B,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAAgC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBpC,OAAA,CAACF,YAAY;MAACO,IAAI,EAAEA;IAAK;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAAChC,EAAA,CAjDID,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAmDT,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}